import assign from 'lodash/assign';
import includes from 'lodash/includes';
import map from 'lodash/map';
import merge from 'lodash/merge';
import nock from 'nock';
import { expect } from 'chai';
import sinon from 'sinon';
import sweep from '../../../libs/iota/recovery';
import {
    LATEST_MILESTONE,
    LATEST_MILESTONE_INDEX,
    LATEST_SOLID_SUBTANGLE_MILESTONE,
    LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
} from '../../__samples__/transactions';
import { milestoneTrytes } from '../../__samples__/trytes';
import * as transferUtils from '../../../libs/iota/transfers';
import { IRI_API_VERSION } from '../../../config';
import { EMPTY_HASH_TRYTES } from '../../../libs/iota/utils';
import { iota } from '../../../libs/iota';

const validSignedTrytes = [
    'JUO9QBYDDFVAMCMTSYPQVYONDGJ9VDMKNTVSWOAXOSG9UANCDOWEMCAFCELZCQIBUKQEPUVFJOGBXYRODBZWZYVYSUVVBCZFKSTWTNJRNLIXVPDLSWSYAKO99LGCNEIMPCSMTOLSTFYXD9LOMXRQKKOTDSCJJ9CVT9VXMKAU9AUXERTMIPGAD9JWDGJPWIU9ZMPLYGOUT9XHZJQQMOMZDAVHYZERKL9UNKCXSTCVQF9JDETGGAWVEVLGEVAO9DXUXHMRM9INDUMDKCUYLGHEZLRT9QSHJLZDOPUEN99DIXHPNKERXFCUWLQAAADPPYBXUJY9OFMFOBYPBKKARZ9NSAZHWNFXYKFDVWZRFHMGUBATBCKRPIQOXONFMDGRMOZCJUUY9GCWLWFSQQPKBIHMXUJJYNNPKCYBIYGTXIJJHSHNFGRTNLG9TGDNLTYAIKMCOSTSFYWBRQAWRYEVYLBPDESUX9YHFHPLYYYUKYQICRACVSMQSOEQQBCNKRYFDBDO9ZJZYGGKTRAXVKXQRIJHUBRTHUNSRYDFFELXDJNKDYJUWRARGKTPGX9KJFKJCBZAOSFCZZPHNJGGWONLQBTMPFEQOSDXALWTVPY9LBALPLNZCBYP9MWYGJ9NVCGZDXTYLCUTSYWDNONOBNIUVMMFYEXWFLMSMZENZTJQQZBMEQNLTSXGONLZEJSPEXMXQZGWOZLQE9RDXNPAPQKRNJ9NVROLADGW9ETEDBUCHZUZCGGCIPOPHRWPDMMOLLTLIVJOOLCGFERNMFJUUXBNL9EMCMDAOLXCCVFMCAQAMGOYK9UQ9AMTIAH9ZWYHFDDISFSCPIU9VSJJRAHAMCITLYEBHJQVQCPQZEPUXI9USEOQGGLFAU9G9GPRUSILOCDGLGRAUREJOPTVUVSMNNF9HMMIHYUZKTTGCAWQHOXDCEKAIBBJTN9GQUAOOFDFQEIVMZXFPFTSKUQOJB9XI9AURJSVDBYHYABIUZLNTCPCJSDKMFPULMCZQWQUCRGCZYWENNZQONAFYCBBBPEZVHRFFZHBXUNIMXG9WBRFM9TEAHXXTGUVISO9EKVYYFUSSTTCVNGFKPVAGTMVSVAOKDMEPWZZAN9KNPBZEMSRFIVPBNSBLJCMPZD9XVJEFF9DTZTDWEENTWDRXJDJYOSWAUIBCVJXWTCZ9BVDDAYQECMPYFCCUBQLNEGXNMOWSPWLWWTZXQASJWQXGUH9LXJXGYOCGFMUNKX9VZVHBQLG9TEFDX9QTLUXSCJEKCHFQUOHQMYBCJNCGWXXCEJYPCO9999BFMX9ZYYANVKADZCRJ9HEYBBQZM9OIIFZNWHDDSZONCRHV9VXXSQRDFXVZNVQBRCCZNSXLLONHTHKZLRODDFMT9NADOQDJJXSNQBJKDDZRKZKIBCSBMCCBKM9ADNNVDMMPIARAVAKVCKXREJHRHVQYWZQWNNCGRWLICODCEGVMVIXOAHZZBQMVPXZVJPGUOZYABUJMREHEPNNPCZNCAVIYEWPWNUWMYIGZMURPN9FUNSTBAEDVVBICJWQCGLKAKTXKNPIUPSDXDM9KVGSBIRQHXJAAKGKMPXN99TIBZSCLJWATMNWLKMSVSIRLEQR99ZYHVDAJDCRKLBRCZFDVYXPEGHOLMNBFDZBECLIMZZGVCEQQXOOZXXVNASRECAE9RUJVYFGITYSVVEJ9CNEIWEPBPJVYSSZSSNYGKUQDCOLLSGULHAEDKBERGADZLPMDIJIZFOQZILKYP9RYYZISNNCLIXSBTJERCGU9SGOBYGDOGNCRWYBJCZYDZIQXQRVKQIRTWZTKOSURSYTKHWXERVXVLFXTVPXI9DAWPNRIKTJSUXWDHYXQFQLHVZIAPNBBAISLHLNUMQTCIXEYSGDPAROWGYOAEZAAHEGKWUEHEZJPTBDWKGRCCVVEDXQKBNLBKFBYHKGGOH9VQA9WFDYHWQLTIFLBETXSBUSQAHNFRCZGX9JTKYVMEPYFDNDVPDBMKVDBLRVLIKHQEMAAFAZWAJKVPYGCQORHLMSPUCHLYADOPIWFSMF9EQGR9BRELDXHULZXZNWQZSAATKADPPDJVHOJKIZGXBL9GMDVFSPMGSULXGLCSMSQMGFJSDMCX9DXFOHWVSWNOYYIXOUNFCEATAZJTYLLRDWTRPDKBNFAYOO9MFBEKLKMNYQZTHRMG9YZSUSUCDILRSSMSBQDQDIDV9UNGGZJKFBPJMKXPHKSFKEKZPKMBMMFJXYDA9STE9WINZWFSYQFBSYIGJB999999999999999999999999999999999999999999999999999999QHUVEZD99B99999999B99999999TCOZJBUTFDSGGBYVHBCCNGCAEUZHKZCBNNXZUOIQKCUZWLTEKQKJOBOGCTOFEGJCKVGXILKAO9PLHHBSW999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999',


];

const attachedTrytes = [



];

const defaultResultMap = {
    checkConsistency: { state: false },
    getBalances: { balances: ['10'] },
    getTransactionsToApprove: {
        trunkTransaction: EMPTY_HASH_TRYTES,
        branchTransaction: EMPTY_HASH_TRYTES,
    },
    findTransactions: { hashes: ['A'.repeat(81)] },
    getTrytes: { trytes: milestoneTrytes },
    wereAddressesSpentFrom: { states: [false, false] },
    getNodeInfo: {
        appVersion: '0.5.0',
        appName: 'HORNET',
        latestMilestone: LATEST_MILESTONE,
        latestSolidSubtangleMilestone: LATEST_SOLID_SUBTANGLE_MILESTONE,
        latestMilestoneIndex: LATEST_MILESTONE_INDEX,
        latestSolidSubtangleMilestoneIndex: LATEST_SOLID_SUBTANGLE_MILESTONE_INDEX,
    },
    getInclusionStates: { states: [false, false] },
    attachToTangle: { trytes: attachedTrytes },
};

const setupNock = (resultMap = defaultResultMap) => {
    return nock('http://localhost:14265', {
        reqheaders: {
            'Content-Type': 'application/json',
            'X-IOTA-API-Version': IRI_API_VERSION,
        },
        filteringScope: () => true,
    })
        .filteringRequestBody(() => '*')
        .persist()
        .post('/', '*')
        .reply(200, (_, body) => {
            return resultMap[body.command] || {};
        });
};

const destroyNock = () => nock.cleanAll();

describe('libs: iota/recovery', () => {
    describe('#sweep', () => {
        let seed;
        let validInput;
        let validTransfer;
        let seedStore;

        before(() => {
            seed = 'U'.repeat(81);
            validInput = {
                address: 'YZSUSUCDILRSSMSBQDQDIDV9UNGGZJKFBPJMKXPHKSFKEKZPKMBMMFJXYDA9STE9WINZWFSYQFBSYIGJB',
                balance: 10,
                keyIndex: 1,
                security: 2,
            };

            validTransfer = {
                address: 'YPNKSETCZAROSZEDYAOMZHBPTQBHCPIPS9MLQJV9ZXKISSUBR9XTNM9TRRKFRUVMTDJUVILMNZNRQKRJA',
                value: 10,
                message: '',
                tag: '',
            };

            seedStore = {
                // Pass in extended nativeModule
                offloadPow: true,
                performPow: () =>
                    Promise.resolve({
                        trytes: attachedTrytes,
                        transactionObject: map(attachedTrytes, iota.utils.transactionObject),
                    }),
                getDigest: (trytes) => Promise.resolve(iota.utils.transactionObject(trytes).hash),
            };
        });

        describe('when input is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Invalid input."', () => {
                return sweep(null)(seedStore, seed, assign({}, validInput, { address: undefined }), validTransfer)
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Invalid input.');
                    });
            });
        });

        describe('when transfer is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Invalid transfer."', () => {
                return sweep(null)(seedStore, seed, validInput, assign({}, validTransfer, { value: null }))
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Invalid transfer.');
                    });
            });
        });

        describe('when input address equals transfer address', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Cannot sweep to same address."', () => {
                return sweep(null)(
                    seedStore,
                    seed,
                    assign({}, validInput, { address: 'U'.repeat(81) }),
                    assign({}, validTransfer, { address: 'U'.repeat(81) }),
                )
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Cannot sweep to same address.');
                    });
            });
        });

        describe('when latest balance on input address is changed', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { getBalances: { balances: ['5'] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Balance mismatch."', () => {
                return sweep(null)(seedStore, seed, validInput, validTransfer)
                    .then(() => {
                        throw new Error();
                    })
                    .catch((err) => {
                        expect(err.message).to.equal('Balance mismatch.');
                    });
            });
        });

        describe('when has pending incoming transactions on input address', () => {
            describe('when transaction bundles are valid', () => {
                describe('when inputs still have enough funds to spend', () => {
                    beforeEach(() => {
                        const resultMap = merge({}, defaultResultMap, {
                            findTransactions: {
                                hashes: [
                                    'MIFTW9BSHQASJSYX9VLTQDCMMVXU9SKMCAUEECEUHXKJWDZNDMUPFOYL9NTKBUXYQHEWGRVHOTRQ99999',
                                    'DYZONGJPIPNRPYEV9WKCW9ZI9XINEEIPVSQVLDVABWUHHTMUDUCTRQY9KSRD9XXGURKHRYRIDVOFA9999',
                                    'Q9WUTRGDVXSFJFZVBZTRAPIQBDTPJPLGISJ9QBOEGCBKOIEQQYESZOPHNNRSZGHIOBNH9GNMUJYA99999',
                                ],
                            },
                            getTrytes: {
                                trytes: [


                                    'WVYQBAJWWBDELHZOCGZKYJREHPWAMHRKX9YNC9CORUYVTHRYAJIXVFKMB99UFLQEJKPTWHUCEONREGYA9GTFNLJSLPMBSRINITIKLAGWAYHBESVHGOIODDGNEAMLDRDFBPETTHGICHXVSRRMPWOAEVEQLEHWWGMYDBPOVNGXGFUTOWDIQMYNBHQFK9RAMDFJFXZUMMQLWYGDCJKTZLLYKF9FKQJPFDCCSEPMDLRIBYANOYOKLD99OBJJBRSJBZRCLYUOUZD9JKZAMPGJVDQBQEOLGIFLYSVGKKII9UVZMCBKKSYADWYRW9HQKDBARBALHGO9FAXCROIRLSTNTXXBIMYFBJFLYJJSCK9FCEUMXKBVHYKLTWEVNYTGILKXZLVXKGKPFOYDEVCAGQUUKVOZCLJNEGXUFRBEYZRVKJDDJGQKYFGHZXCCIELUTBOMGOWPZHNLMGUAIHBUSHDGXRIAKXGRPYUTTAIJYHLRYBVDDNCFVA9CMHLQRGL9NVZOEABONDCEDLMFEUJFDV9MAHYBWIRXUVPZGUDNACICIXCENNOMFWJPKXFH9S9GCID9VNNKTARR9DHLRPGU9AZKWTMBPPTKILSNKV9TL9S9VO9XKTHRQFNKGFDUNSHGGETYCEQCCLZUIQAYWNUQFBNDQNA9TPPLLVPOHBIYCHKOAOUVVMQQQPTAS9BPERKAWMCOAGEOXERFDQYH9GSFBYGFZYSQGXQIDBJ9ODJNCJNYYOM9R9RTRPVLJUJOFWJOXTASUUJZ9OEMINHBQWMMBNLJPN9REGRHTJDPBFB9LKXO9OWLOBUTENHMMCKOPWHILWPVVRLNBBPBIVJWJIKASZUMG9KPSOMRWTVMPBYOPXBEFHIBDXBMIHIYFMWNVCCLMEAFNQCUFXSEMPNKWMWXJISJ9VBLHRNQZZO9WKAJBJTK9YSIRTZ9TCDQJ9UWXMICXSERVEKQKNMJCCTRQGRWUGFXPJLYGNPXCVJH9BSRTTEXXGEL9OHH9LWCMOYIMLDSRNICYEXHNYLL9ZPSZDBVEGMMGLOJHIVUAOIFXRYUBFQIJARVDVWUGMXEWNPIASAZJAXKLCXJMBXZEKWQRBWMAGSCIOLBIHTHWVS9GAC9QWWTMTWCJNJEFW9PEFNABUSEPIQUYKYYH9SMVKNJIMHPWHJAAPQCJVWGGEEQEMBOXCUQELWBO9ECKZDXVTRLCUBOGBYFK9YVCPXTBQOMSBCFOPCXYLMSIJQAWVR9GZRJOVAOKZCZEHJCFAAGPBCGRRLGGLDHYTPKBHDKAGMXJIEWQMRDX9EMDIYGNCCTQRHZXGIG9HDLGDCWCAHOUQVWGMUKLQQDZAEWTUYGULMQCCOYPWRFPQDMYMWAQKOAYAAC9SMORRXUSTUGQ9PVAHJSXJJTTYOCEGJ9SLEXBZIKJWUZFGERYUB9OPLLLQVGPMOBVEKVRCY9FVOHFHZEDCSHPHEPDIRE9BH9IIKUQAMDWNGESQLBNYSDBNWAQEUAFKDFVYRGHZJIVJCWNNCAJTVEYXRHDMXMVPHHHGZCJIXVDFTRBGG9QNMOOPEFVBMPDEHAXCZUAEOLVVJZHAZFLYJRPQSPHZFRAWQDPWRWWEFFCXQTKAFABLPXJTLDZST9CAYYVSFDAMFCXVQKRLVGN9YWSIMLWPDN9WVNSX9BQSKAOUVCYWSPNIIQAJIOTIGQVQCTAORJWBJ9CGGRBLLUBNKAX9YVCWFXL9PZGOWIHVLNTRUGVJTAMUVIFMNNLNUWMTGCRCTGKDEFGMABLRPOZDZOOXBHOHJ9ANMOQTBCLJZVJLHXXSLXSRSEUBAMSWWEVQYPJOYFUKFVDEGKEASGFXSFTQFP9VTMQ9AAVRGMROBHFRNYS9CMWTTRLWUISZW9SZYLYUI9JAAAVMRODTWIMZSMJNUIMRZHRSHXAKDFGSJDGIYNONCPMZUKLDUBBOCAJUDPTMTVFLFNFQPFZISVBXQAJWURFHRSLASFXQVJKNKCIABWS9ZUMEBYCQKRFHTJNIWCFGKAILBZCIFYNTONMAQTC9TSXNLFZHAOBULD9DUYRTUELPPCAGJBJJZYFUAIGKBZ9XZHMMGRTGVUDHJYGZQQHCOC9YOXIXGKVFWWUCSOQYNHR9NDBYGXACJUSXIVCMIGPAZYEW9F9UBZGFDIVERJLGRSJMXBOXZFXGZRQIOZTOYKUOVQBUKKEMU9TPLWBFN9FOGSGDOEEVAYYIVHBZTLYMGWRLISBZLTZSBPUPEZKSPXSWDYTO9UKBN9CFRZ999999999999999999999999999TRINITY99999999999999999999PEUSEZD99B99999999B99999999SFAVIEXRBKQUKNBOEQGRFTGADOIAY9LRJVE9GJVDZZWWXDUWPSBFT9JBGHQIEBFBLBOIZUVRLVQECDCKCVOABTWHT9HYOYEIJIAC9OVMHMVPTGQNEMAMAFRDZDRHYZFTIBJQRD9BPGUGAABSRRBHDPSYVSUJPZ9999VOABTWHT9HYOYEIJIAC9OVMHMVPTGQNEMAMAFRDZDRHYZFTIBJQRD9BPGUGAABSRRBHDPSYVSUJPZ9999TRINITY99999999999999999999VMDSYK9LE999999999MMMMMMMMMKLEINA999999999999999999999',
                                ],
                            },
                            getLatestInclusion: { states: [false] },
                        });

                        nock('http://localhost:14265', {
                            reqheaders: {
                                'Content-Type': 'application/json',
                                'X-IOTA-API-Version': IRI_API_VERSION,
                            },
                            filteringScope: () => true,
                        })
                            .filteringRequestBody(() => '*')
                            .persist()
                            .post('/', '*')
                            .reply(200, (_, body) => {
                                if (
                                    body.command === 'getTrytes' &&
                                    includes(
                                        body.hashes,
                                        // Return milestone trytes to mimic the scenario of checking if a node is healthy.
                                        LATEST_MILESTONE,
                                    )
                                ) {
                                    return { trytes: milestoneTrytes };
                                } else if (body.command === 'getInclusionStates') {
                                    return { states: [false] };
                                }

                                return resultMap[body.command] || {};
                            });
                    });

                    afterEach(() => {
                        destroyNock();
                    });

                    it('should promote pending transactions', () => {
                        const stub = sinon
                            .stub(transferUtils, 'promoteTransactionTilConfirmed')
                            .returns(() => Promise.resolve({}));

                        return (
                            sweep(null)(seedStore, seed, validInput, validTransfer)
                                // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
                                .catch((err) => {
                                    expect(err.message).to.equal('The bundle is invalid.');
                                    expect(stub.called).to.equal(true);

                                    stub.restore();
                                })
                        );
                    });
                });

                describe('when inputs does not have enough funds to spend', () => {
                    beforeEach(() => {
                        const resultMap = merge({}, defaultResultMap, {
                            findTransactions: {
                                hashes: [
                                    'MIFTW9BSHQASJSYX9VLTQDCMMVXU9SKMCAUEECEUHXKJWDZNDMUPFOYL9NTKBUXYQHEWGRVHOTRQ99999',
                                    'DYZONGJPIPNRPYEV9WKCW9ZI9XINEEIPVSQVLDVABWUHHTMUDUCTRQY9KSRD9XXGURKHRYRIDVOFA9999',
                                    'Q9WUTRGDVXSFJFZVBZTRAPIQBDTPJPLGISJ9QBOEGCBKOIEQQYESZOPHNNRSZGHIOBNH9GNMUJYA99999',
                                ],
                            },
                            getTrytes: {
                                trytes: [



                                ],
                            },
                            getLatestInclusion: { states: [false] },
                        });

                        nock('http://localhost:14265', {
                            reqheaders: {
                                'Content-Type': 'application/json',
                                'X-IOTA-API-Version': IRI_API_VERSION,
                            },
                            filteringScope: () => true,
                        })
                            .filteringRequestBody(() => '*')
                            .persist()
                            .post('/', '*')
                            .reply(200, (_, body) => {
                                if (
                                    body.command === 'getBalances' &&
                                    includes(
                                        body.addresses,
                                        // Return zero balance to mimic the scenario of non-funded input of pending transaction.
                                        'KUOVQBUKKEMU9TPLWBFN9FOGSGDOEEVAYYIVHBZTLYMGWRLISBZLTZSBPUPEZKSPXSWDYTO9UKBN9CFRZ',
                                    )
                                ) {
                                    return { balances: ['0'] };
                                } else if (
                                    body.command === 'getTrytes' &&
                                    includes(
                                        body.hashes,
                                        // Return milestone trytes to mimic the scenario of checking if a node is healthy.
                                        LATEST_MILESTONE,
                                    )
                                ) {
                                    return { trytes: milestoneTrytes };
                                } else if (body.command === 'getTransactionsToApprove') {
                                    return {
                                        // Extracted from attachedTrytes
                                        trunkTransaction:
                                            'QGXGXHHDLBKBVX9BXRUSWRKIOWJQSDNTZCGAQOY9MAAIPFXIBCCBKJVHA9KOMPOBFZUIFRIFDLBFZ9999',
                                        branchTransaction:
                                            'HUBZQRKUTAPZNQZIFNYH9YZFJVWOJZXJKSKCLQIGSJNAATOLYZDMEZPLWKQG9XEEHQRSJWCOGNHR99999',
                                    };
                                }

                                return resultMap[body.command] || {};
                            });
                    });

                    afterEach(() => {
                        destroyNock();
                    });

                    it('should not promote pending transactions', () => {
                        const stub = sinon.stub(transferUtils, 'promoteTransactionTilConfirmed');

                        return (
                            sweep(null)(seedStore, seed, validInput, validTransfer)
                                // Because provided seed is incorrect, it will lead to incorrect signatures and will throw
                                .catch((err) => {
                                    expect(err.message).to.equal('The bundle is invalid.');
                                    expect(stub.called).to.equal(false);

                                    stub.restore();
                                })
                        );
                    });

                    it('should not block sweeps from input address', () => {
                        return sweep(null)(
                            seedStore,
                            'A99A9A9AA999AAAA999A999A9AAAAA999A9A999AAA9999AA99AAA9AAAA9A9AAA99A9AAA99AAAAA9AA',
                            validInput,
                            validTransfer,
                        ).then(({ trytes }) => {
                            expect(trytes).to.eql(attachedTrytes);
                        });
                    });
                });
            });

            describe('when transaction bundles are invalid', () => {
                beforeEach(() => {
                    const invalidTrytes = map(
                        [
                            'DNMRMGTM9D9MNXXFMBWKOOWUCZZLJHIBAUCKVOQSLDUCIMLVZOOUSTWVOTLALJKN9PPPOCODDFXQBAFQXNRSZXV9XQSQIGQQMQJJOOETLUYHFIVAEA9SRTOQTJB9ELHCIBTVIPQNOQD9FQMWJWTIKSNTEHGZSLHQCXNYVQLTCLSUNGFRGNDDLDPOHCUKKJPNX9AOFVCCFDYCRIDVFDMNNMS9UWFPHQW9WPZJYO9SMKHZHHNAUIDZZJ9BMLNSQSGUESBJDHXDOOCZESFLRBCHWLFSTOXBITIJFAPURTKJCN9REX9DLIZQ9FXRQUGMMSLUVLIWSVPYAYFBDPE9LQYROMZWTGLZZDLIXZLEFOIKV9VGMSHSVFRPLMFFDHWAXWIUC9UYBERTNRMFJL9WEAXVWTCBIUERFLPMWCAUOCIE9QVAT9WHMZFMWBXVDBPSOHOWTMFSDQDLHLAWAKMHZDCPGUJLYBNNTGGFYQQSG9JWETVCXQTHNWYUDDGVGVSDORKMMUESVVEOPTCVHXEECBFNSFYHUMHDFDFLRQEHSFNWFUDSLX9MTCMQIABJVHOFCDEFOTFFKQVCUBRFEXIHVELCGPTIDDW9GWIBXBYJGNBVLBPEMUKAILSMFYKHQLDYXNAYGZPOVJJYMPJXIMV9QTXGZDRVCVTRDRJNG9MXAGDNVDTANRHAOICCHVUUDXFETXVMFKUQZTRVYGAEPMZYDZVTCMNJDJHVKX9HIYCFZDFQRE9UYFNXMGQXZJODQYOZDYXPTMSGLXUZ99G9SOBTXWXQGORX9WQQB9LZRWOAULCIAYNTWJVMJLGWIWFQEXQCLHOLJYIMFEYVXLXAAJXKRHQOBPWMW9PCR9BISJD9QJSSBMHOJMHJABGNICKKBECYCZMSZYMGVQPXFHRPVMTFCDK9HZFWUAIBUM9OFYCOKHFIHSUQGZSPUIBGYFJQUOVYVMDSXBNXBSPXPDGAQEFYWUEEGOWULF9ERTYWDTXQZDJAXBAJYVXPPJFJPOZXXWNTKIXBCNGUTATHDESAMVPNOJOSQYRWAILDDVIMVNVBPVFZLMOEMXMQN9ZGMXZGDTHJCRCYLJXLQOEMQGRWAOW9FREWBFGFSASXJSAFPHVQMJEIOQHMDDQZMWT9KIQRXRCSKYZZJRNHAZORDVCCNDDADUVQCFSDUYSDHOBMIPDK9YV9NIOVILJBTOBOWJSGQLKJ9KABYQAPNCIZXPLDPWARXOBALEKXBHVLYMDKUEJOVLNMQBXKMPOAPVXGWZUALGUAVMFJYWMUVNMLNCZCADWYYANPGESOCFUEGZNSDGAJOHTCKJSJKMEDJCLQBFCTTDZQGMFAPXZETDF9JJHCEYPAEMHEVALKJSXFCTLTXVVZBEFFYRVJRDMTCZVGLXEYTXYHMF9ZHP9SVGR9NEQ9KNJMJYQVQZUGZKX9YWTTYDUXECWHHNYKBF9UACMILHHJSPPIAKCBDUX9VC9YYEHFUCS9CVZT9FPWGJZRWVLWV9GKEGKYCJMITZIJRBK9CCRQSSJLWKZGYNXXFIJQPVKKYBAQRJOYYP9NHGQJGZGOARHRPEEAAHFUYBRATZYBBRRVYZNVFFNRGJDBVW9FTLKAGMRFRMOWLBASYUQOGNS9SIOYLZV9PQTFGLKHWCGFRO9KCOYXLMVHYJFQCCVWZDJXHFAAFPNOABXRKZIQILURZDBUD9EYBCOYYDZCTT9PGJ9UOKXBLTNFMFHNEUDNKARDE9DHGBNJPFJASQTCJDQHOFYPXPOUKQRFAOEOOIFITXPJHJBXJACDHHFSUIGHEVGPDAVVVBWJAVEAQEQCPFVYQNRQEYMZL9HWTZGEVACUWKYWOXCWAGERR9FGJE9TDGNXMFCRMFLVMIDGEWVGZ9CEDVAUCAOPSYPRTCALIZABDCCKMMAULSBLPHRHRMIGEQGDOVWAYOSDXLUYNWDCTCLBRE9JLZXH9ZLCRHJFQOABDLAHHGUYYPTYBFNZGTEWKGZBLALAUAJSSZXMMOVQJLLBLMZWRZOPDKFSRMZ9UWPXSRETJL9DPWOKOSSCEESEEIMMIXJJ9UVNEXNGFIFVKYCRUYCSNSOPBBYAVDSQRVXDVZX9WDKBCHPVGGKGNINBTUXRMFZLROVXKSSIASSNKZPKES9KGQIXUNAVGNDXECKQAI9KUCZZFXNPLGEFWPLNTEAKUOVQBUKKEMU9TPLWBFN9FOGSGDOEEVAYYIVHBZTLYMGWRLISBZLTZSBPUPEZKSPXSWDYTO9UKBN9CFRZZ99999999999999999999999999TRINITY99999999999999999999PEUSEZD99A99999999B99999999SFAVIEXRBKQUKNBOEQGRFTGADOIAY9LRJVE9GJVDZZWWXDUWPSBFT9JBGHQIEBFBLBOIZUVRLVQECDCKCQ9WUTRGDVXSFJFZVBZTRAPIQBDTPJPLGISJ9QBOEGCBKOIEQQYESZOPHNNRSZGHIOBNH9GNMUJYA99999VOABTWHT9HYOYEIJIAC9OVMHMVPTGQNEMAMAFRDZDRHYZFTIBJQRD9BPGUGAABSRRBHDPSYVSUJPZ9999TRINITY99999999999999999999TOESYK9LE999999999MMMMMMMMMLYPCF9999999999999999999999',


                        ],
                        (tryteString) => `${'9'.repeat(2187)}${tryteString.slice(2187)}`,
                    );

                    const resultMap = merge({}, defaultResultMap, {
                        findTransactions: {
                            hashes: [
                                'MIFTW9BSHQASJSYX9VLTQDCMMVXU9SKMCAUEECEUHXKJWDZNDMUPFOYL9NTKBUXYQHEWGRVHOTRQ99999',
                                'DYZONGJPIPNRPYEV9WKCW9ZI9XINEEIPVSQVLDVABWUHHTMUDUCTRQY9KSRD9XXGURKHRYRIDVOFA9999',
                                'Q9WUTRGDVXSFJFZVBZTRAPIQBDTPJPLGISJ9QBOEGCBKOIEQQYESZOPHNNRSZGHIOBNH9GNMUJYA99999',
                            ],
                        },
                        getTrytes: {
                            trytes: invalidTrytes,
                        },
                        getTransactionsToApprove: {
                            // Extracted from attachedTrytes
                            trunkTransaction:
                                'QGXGXHHDLBKBVX9BXRUSWRKIOWJQSDNTZCGAQOY9MAAIPFXIBCCBKJVHA9KOMPOBFZUIFRIFDLBFZ9999',
                            branchTransaction:
                                'HUBZQRKUTAPZNQZIFNYH9YZFJVWOJZXJKSKCLQIGSJNAATOLYZDMEZPLWKQG9XEEHQRSJWCOGNHR99999',
                        },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-IOTA-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTrytes' &&
                                includes(
                                    body.hashes,
                                    // Return milestone trytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { trytes: milestoneTrytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should not block input address from spending', () => {
                    return sweep(null)(
                        seedStore,
                        'A99A9A9AA999AAAA999A999A9AAAAA999A9A999AAA9999AA99AAA9AAAA9A9AAA99A9AAA99AAAAA9AA',
                        validInput,
                        validTransfer,
                    ).then(({ trytes }) => {
                        expect(trytes).to.eql(attachedTrytes);
                    });
                });
            });
        });

        describe('when has outgoing transactions from input address', () => {
            describe('when transaction bundles are valid', () => {
                beforeEach(() => {
                    const resultMap = merge({}, defaultResultMap, {
                        // Return the attached signed trytes as a result
                        // To mimic the scenario of an outgoing transaction from input address
                        getTrytes: { trytes: attachedTrytes },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-IOTA-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTrytes' &&
                                includes(
                                    body.hashes,
                                    // Return milestone trytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { trytes: milestoneTrytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should throw with an error "Addresses used in this bundle have already been spent from."', () => {
                    return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                        expect(err.message).to.equal('Addresses used in this bundle have already been spent from.');
                    });
                });
            });

            describe('when transaction bundles are invalid', () => {
                beforeEach(() => {
                    const resultMap = merge({}, defaultResultMap, {
                        // Return the signed trytes as a result
                        // To mimic the scenario of an outgoing transaction from input address
                        // signedTrytes do not have the valid hash, so the bundle should be invalid
                        // and input addresses should not be blocked from spending
                        getTrytes: { trytes: validSignedTrytes },
                        getTransactionsToApprove: {
                            // Extracted from attachedTrytes
                            trunkTransaction:
                                'QGXGXHHDLBKBVX9BXRUSWRKIOWJQSDNTZCGAQOY9MAAIPFXIBCCBKJVHA9KOMPOBFZUIFRIFDLBFZ9999',
                            branchTransaction:
                                'HUBZQRKUTAPZNQZIFNYH9YZFJVWOJZXJKSKCLQIGSJNAATOLYZDMEZPLWKQG9XEEHQRSJWCOGNHR99999',
                        },
                    });

                    nock('http://localhost:14265', {
                        reqheaders: {
                            'Content-Type': 'application/json',
                            'X-IOTA-API-Version': IRI_API_VERSION,
                        },
                        filteringScope: () => true,
                    })
                        .filteringRequestBody(() => '*')
                        .persist()
                        .post('/', '*')
                        .reply(200, (_, body) => {
                            if (
                                body.command === 'getTrytes' &&
                                includes(
                                    body.hashes,
                                    // Return milestone trytes to mimic the scenario of checking if a node is healthy.
                                    LATEST_MILESTONE,
                                )
                            ) {
                                return { trytes: milestoneTrytes };
                            }

                            return resultMap[body.command] || {};
                        });
                });

                afterEach(() => {
                    destroyNock();
                });

                it('should not block input address from spending', () => {
                    return sweep(null)(
                        seedStore,
                        // Pass in correct seed
                        'A99A9A9AA999AAAA999A999A9AAAAA999A9A999AAA9999AA99AAA9AAAA9A9AAA99A9AAA99AAAAA9AA',
                        validInput,
                        validTransfer,
                    ).then(({ trytes }) => {
                        expect(trytes).to.eql(attachedTrytes);
                    });
                });
            });
        });

        describe('when recipient address is spent', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [false, true] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Addresses used in this bundle have already been spent from."', () => {
                return sweep()({}, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('Addresses used in this bundle have already been spent from.');
                });
            });
        });

        describe('when input address is spent', () => {
            beforeEach(() => {
                setupNock(merge({}, defaultResultMap, { wereAddressesSpentFrom: { states: [true, false] } }));
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "Addresses used in this bundle have already been spent from."', () => {
                return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('Addresses used in this bundle have already been spent from.');
                });
            });
        });

        describe('when signed bundle is invalid', () => {
            beforeEach(() => {
                setupNock();
            });

            afterEach(() => {
                destroyNock();
            });

            it('should throw with an error "The bundle is invalid."', () => {
                // Seed is fake, so if all checks pass and it prepares transfers the signatures will be invalid
                return sweep(null)(seedStore, seed, validInput, validTransfer).catch((err) => {
                    expect(err.message).to.equal('The bundle is invalid.');
                });
            });
        });

        describe('when signed bundle is valid', () => {
            beforeEach(() => {
                setupNock(
                    merge({}, defaultResultMap, {
                        getTransactionsToApprove: {
                            // Extracted from attachedTrytes
                            trunkTransaction:
                                'QGXGXHHDLBKBVX9BXRUSWRKIOWJQSDNTZCGAQOY9MAAIPFXIBCCBKJVHA9KOMPOBFZUIFRIFDLBFZ9999',
                            branchTransaction:
                                'HUBZQRKUTAPZNQZIFNYH9YZFJVWOJZXJKSKCLQIGSJNAATOLYZDMEZPLWKQG9XEEHQRSJWCOGNHR99999',
                        },
                    }),
                );
            });

            afterEach(() => {
                destroyNock();
            });

            it('should return correct transaction trytes', () => {
                return sweep(null)(
                    seedStore,
                    // Pass in correct seed
                    'A99A9A9AA999AAAA999A999A9AAAAA999A9A999AAA9999AA99AAA9AAAA9A9AAA99A9AAA99AAAAA9AA',
                    validInput,
                    validTransfer,
                ).then(({ trytes }) => {
                    expect(trytes).to.eql(attachedTrytes);
                });
            });
        });
    });
});
